#!/bin/sh
set -e

mkdir -p ~/.kula/log 2>/dev/null

filelist=~/.kula/log/filelist.log
knownfiles=~/.kula/log/knownfiles.log
kula=~/.kula/log/kula.log
downloads=~/.kula/log/downloads.log

requires() {
  local _i
  for _i in $@; do
    if ! which $_i >/dev/null 2>&1; then
      missing="${missing} ${_i}"
    fi
  done

  if [ ${#missing} -ne 0 ]; then
    echo "$0 requires the following programs ${missing}" 1>&2
    exit 1
  fi
}

update_file_list() {
# TODO support filtering by depth
#  find -type f -readable -printf "%d:%p\n" >$filelist
  find -type f -readable >$filelist
}

peers() {
  avahi-browse --ignore-local --terminate --parsable --resolve \
               _kula._tcp | grep "^=" | cut -d";" -f8-9 | tr ";" ":"
}

links() {
  echo "Getting $1 filelist"
  wget $1/$filelist -q -O - | sed "s,^\.,http://$1," >$knownfiles
}

# wait for processes to end
trap_kill() {
  echo "Killing services: $avahi_pid $httpd_pid"
  kill $avahi_pid $httpd_pid 2>/dev/null
  wait $avahi_pid $httpd_pid
  popd >/dev/null
}

trap trap_kill INT KILL ERR EXIT

requires avahi-publish darkhttpd avahi-browse wget find

pushd "${1:-.}" >/dev/null

darkhttpd . --port 12556 --log $kula &
httpd_pid=$!

avahi-publish -s "Kula Ring" _kula._tcp 12556 &
avahi_pid=$!

echo "HTTPd: $httpd_pid"
echo "Kula: $avahi_pid"

while [ 1 ]; do
  update_file_list && \
  echo "Sharing $(wc -l $filelist | cut -d" " -f1) files"

  peers="$(peers)"
  dls=""
  echo "Found ${#peers} peers: $peers"

  for _peer in $peers; do
    links $_peer

    grep "$_peer" $knownfiles | sort -R | head -n1 | \
      wget -i - --no-verbose \
           --timeout=5 \
           --continue \
           --no-clobber \
           --append-output=$downloads \
           --force-directories \
           --no-host-directories &
    dls+=" $!"

  done

  if [ ${#dls} -ne 0 ]; then
    echo "Waiting for downloads ($dls)"
    wait $dls
  else 
    echo "Sleeping 15s"
    sleep 15s
  fi
done
